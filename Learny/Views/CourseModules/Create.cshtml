@model Learny.ViewModels.ModuleViewModel
@{
    ViewBag.Title = "Ny modul";
}

<h5>Kurs: @Html.ActionLink(Model.FullCourseName, "Details", "Courses", new { id = Model.CourseId }, null)</h5>

<h2>Ny modul</h2>


@using (Html.BeginForm())
{
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
        
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(model => model.CourseId) @*Http post courseId to create controller*@
        @Html.HiddenFor(model => model.FullCourseName)
        @Html.HiddenFor(model => model.Edit)
        
       
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (!Model.Edit)
                {
                    <input type="submit" value="Lägg till ny" class="btn btn-default" />
                }
                else
                {
                    <input type="submit" value="Spara ändring" class="btn btn-default" /> 
                }
            </div>
        </div>
    </div>
}


@if (TempData["Feedback"] != null)
{
    <div class="alert alert-success alert-dismissable fade in">
        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
        @TempData["Feedback"]
    </div>
}


@Html.Action("Modules", "CourseModules", new { id = Model.CourseId , linkToEditInCreateView = true})

@*<div>
    @Html.ActionLink("Tillbaka til listan", "Index")
</div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
